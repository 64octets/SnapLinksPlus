<?xml version="1.0"?>

<!--
	build.xml
    Copyright (C) 2008	Tommi Rautava
    
    This file is part of Snap Links.

    Snap Links is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Snap Links is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Snap Links.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="snaplinks" default="build-dev">

	<property name="build.dir" value="${basedir}/build" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="dist.dir" value="${basedir}/dist" />
	<property name="downloads.dir" value="${basedir}/downloads" />
	<property name="www.dir" value="${basedir}/www" />
	<property name="cert.dir" value="${basedir}/cert" />

	<property file="${basedir}/release.properties"/>

	<fileset id="src.root.files" dir="${src.dir}"> 
		<include name="chrome.manifest"/>
		<include name="defaults/**"/> 
		<include name="license.*"/> 
		<include name="gpl.txt"/> 
		<exclude name="**/.cvsignore"/>
	</fileset>	
	

	<target name="build-babelzilla" depends="clean,init,set-version-dev,copy-src-to-build,xpi-babelzilla">
		<tstamp prefix="stop">
			<format property="build.tstamp" timezone="GMT+0" pattern="yyyy-MM-dd HH:mm z"/>
		</tstamp>
		<echo message="${extension.versionNumber.forThisBuild} ready ${stop.build.tstamp}" />
	</target>
	
	
	<target name="build-dev" depends="clean,init,set-version-dev,copy-src-to-build,xpi-dev">
		<tstamp prefix="stop">
			<format property="build.tstamp" timezone="GMT+0" pattern="yyyy-MM-dd HH:mm z"/>
		</tstamp>
		<echo message="${extension.versionNumber.forThisBuild} ready ${stop.build.tstamp}" />
	</target>
	
	
	<target name="checksum">
		<checksum file="${downloads.dir}/${extension.published.xpi}" 
			algorithm="${extension.checksum.algorithm}" 
			property="extension.checksum.value"/>
	</target>	
	

	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}" includes="**/*" excludes=".cvsignore" />
		</delete>
	</target>

	
	<target name="clean-dist">
		<delete includeemptydirs="true">
			<fileset dir="${dist.dir}" includes="**/*" excludes=".cvsignore" />
		</delete>
	</target>
	
	
	<target name="copy-src-to-build" depends="init">
		<copy todir="${build.dir}/src/chrome" overwrite="true">
			<fileset dir="${src.dir}" 
				includes="content/**,skin/**" 
				excludes="**/.cvsignore"/>
		</copy>
		
		<copy todir="${build.dir}/src" overwrite="true">
			<fileset refid="src.root.files"/>
		</copy>

		<replace file="${build.dir}/src/chrome.manifest">
			<replacefilter token="jar:" value="" />
			<replacefilter token="${ant.project.name}.jar!/" value="" />
		</replace>

		<copy todir="${build.dir}/src" file="${src.dir}/install.rdf" overwrite="true"/>

		<replace file="${build.dir}/src/install.rdf" propertyFile="${basedir}/release.properties">
			<replacefilter token="@id@" value="${extension.id}" />
			<replacefilter token="@version@" value="${extension.versionNumber.forThisBuild}" />
			<replacefilter token="@updateURL@" value="${extension.updateURL}" />
			<replacefilter token="@homepageURL@" property="extension.homepageURL" />
			<replacefilter token="@minVersion@" property="extension.firefox.minVersion" />
			<replacefilter token="@maxVersion@" property="extension.firefox.maxVersion" />
		</replace>
	</target>
	
	
	<target name="copy-src-to-xpi-build" depends="init,copy-src-to-build">
		<mkdir dir="${build.dir}/xpi" />
		<mkdir dir="${build.dir}/xpi/chrome" />

		<copy todir="${build.dir}/xpi" overwrite="true">
			<fileset refid="src.root.files"/>
		</copy>
	
		<copy todir="${build.dir}/xpi" file="${build.dir}/src/install.rdf" overwrite="true"/>
	</target>
	

	<target name="dist" depends="clean,set-version-dist,xpi-babelzilla,xpi,xpi-amo">
		<copy file="${dist.dir}/${extension.xpi}" todir="${downloads.dir}" overwrite="true"/>
		
		<checksum 
			file="${downloads.dir}/${extension.xpi}" 
			algorithm="${extension.checksum.algorithm}" 
			property="extension.downloads.xpi.checksum"/>
		
		<tstamp prefix="stop">
			<format property="build.tstamp" timezone="GMT+0" pattern="yyyy-MM-dd HH:mm z"/>
		</tstamp>
		
		<echo message="${extension.versionNumber.forThisBuild} is ready ${stop.build.tstamp}" />
		<echo message="${extension.checksum.algorithm} checsum is ${extension.downloads.xpi.checksum}" />
	</target>
	
	
	<target name="init">
		<tstamp>
			<format property="build.tstamp" timezone="GMT+0" pattern="yyyy-MM-dd HH:mm z"/>
			<format property="rss.pubDate" pattern="EEE, d MMM yyyy HH:mm:ss Z"/>
		</tstamp>
		
		<property name="buildNumberFile" value=".buildNumbers/build.number.${extension.version}"/>
		<buildnumber file="${buildNumberFile}"/>

		<echo level="info" message="Version ${extension.version}-${extension.subVersion} Build ${build.number} started ${build.tstamp}"/>

		<mkdir dir="${build.dir}/src" />
		<mkdir dir="${build.dir}/src/chrome" />
	</target>
	

	<target name="init-amo" depends="init">
		<mkdir dir="${build.dir}/amo" />
	</target>
	

	<target name="init-babelzilla" depends="init">
		<mkdir dir="${build.dir}/babelzilla" />
		<mkdir dir="${build.dir}/babelzilla/chrome" />
	</target>
	

	<target name="jar" depends="copy-src-to-xpi-build">
		<delete file="${build.dir}/xpi/chrome/${ant.project.name}.jar"/>
		
		<zip destfile="${build.dir}/xpi/chrome/${ant.project.name}.jar">
			<zipfileset dir="${build.dir}/src/chrome" includes="**/*" excludes="**/amo.properties"/>
		</zip>
	</target>
	
	
	<target name="publish" depends="release.ini">
	</target>
	

	<target name="release.ini" depends="set-pub-xpi-name,checksum">
		<concat destfile="${www.dir}/release.ini">
			<string value="[release]&#0010;" />
			<string value="version = &quot;${extension.publishedVersion}&quot;&#0010;" />
			<string value="xpi = &quot;${extension.published.xpi}&quot;&#0010;" />
			<string value="checksum = &quot;${extension.checksum.algorithm}:${extension.checksum.value}&quot;&#0010;" />
		</concat>
	</target>
	
	
	<target name="repack-published-for-amo" depends="set-pub-xpi-name">
		<property name="repack.dir" value="${build.dir}/amo.${DSTAMP}.${TSTAMP}"/>

		<mkdir dir="${repack.dir}"/>

		<unzip src="${downloads.dir}/${extension.published.xpi}" dest="${repack.dir}"/>

		<replace file="${repack.dir}/install.rdf">
			<replacefilter token="&lt;em:updateURL&gt;" value="&lt;!-- &lt;em:updateURL&gt;"/>
			<replacefilter token="&lt;/em:updateURL&gt;" value="&lt;/em:updateURL&gt; --&gt;"/>
		</replace>

		<mkdir dir="${dist.dir}/amo" />

		<delete file="${dist.dir}/amo/${extension.published.xpi}"/>
		
		<zip destfile="${dist.dir}/amo/${extension.published.xpi}">
			<zipfileset dir="${repack.dir}" includes="*/**"/>
		</zip>
		
		<delete dir="${repack.dir}"/>
	</target>
	
	
	<target name="set-pub-xpi-name">
		<property name="extension.published.xpi" value="${ant.project.name}-${extension.publishedVersion}-fx.xpi"/>
	</target>


	<target name="set-version">
		<property name="extension.versionNumber" value="${extension.version}${extension.subVersion}"/>
	</target>		

			
	<target name="set-version-dev" depends="set-version">
		<property name="extension.versionNumber.plusBuild" value="${extension.versionNumber}.0pre${build.number}"/>
		<property name="extension.versionNumber.forThisBuild" value="${extension.versionNumber.plusBuild}"/>
	</target>
	

	<target name="set-version-dist" depends="set-version">
		<property name="extension.versionNumber.forThisBuild" value="${extension.versionNumber}"/>
	</target>		
	
	
	<target name="set-xpi-name">
		<property name="extension.xpi" value="${ant.project.name}-${extension.versionNumber.forThisBuild}-fx.xpi"/>
	</target>
	

	<target name="unpack-babelzilla-replaced-bundle" depends="init">
		<mkdir dir="${build.dir}/all_locales_replaced" />

		<property name="babelzilla-replaced-bundle-tar-gz" value="${extension.babelzillaFilenamePrefix}_all_locales_replaced.tar.gz"/>
		
		<untar src="${basedir}/babelzilla/${babelzilla-replaced-bundle-tar-gz}" dest="${build.dir}/all_locales_replaced/locale"
			compression="gzip" overwrite="true"/>

		<move todir="${build.dir}/src/chrome" overwrite="true">
			<fileset dir="${build.dir}/all_locales_replaced" 
				includes="*/**" 
				excludes="**/*.properties,**/en-US/**,**/contents.rdf"/>
		</move>

		<copy todir="${build.dir}/src/chrome" overwrite="true">
			<fileset dir="${src.dir}" 
				includes="locale/**" 
				excludes="**/.cvsignore,locale/**/*.properties"/>
		</copy>

		<native2ascii src="${src.dir}" dest="${build.dir}/src/chrome" encoding="UTF-8">
			<include name="locale/**/*.properties"/>
		</native2ascii>

		<native2ascii src="${build.dir}/all_locales_replaced" dest="${build.dir}/src/chrome" encoding="UTF-8">
			<include name="locale/**/*.properties"/>
			<exclude name="locale/en-US/**"/>
		</native2ascii>

		<replace dir="${build.dir}/src/chrome/locale">
			<include name="**/snaplinks.properties"/>
			<replacefilter token="snaplinks@snaplinks.net" value="snaplinks@snaplinks.mozdev.org"/>
		</replace>
	</target>
	
	
	<target name="unpack-babelzilla-blank-bundle" depends="init-babelzilla">
		<mkdir dir="${build.dir}/all_locales_blank" />

		<property name="babelzilla-blank-bundle-tar-gz" value="${extension.babelzillaFilenamePrefix}_all_locales_blank.tar.gz"/>
		
		<untar src="${basedir}/babelzilla/${babelzilla-blank-bundle-tar-gz}" dest="${build.dir}/all_locales_blank/locale"
			compression="gzip" overwrite="true"/>

		<move todir="${build.dir}/babelzilla/chrome" overwrite="true">
			<fileset dir="${build.dir}/all_locales_blank" 
				includes="*/**" 
				excludes="**/*.properties,**/en-US/**,**/contents.rdf"/>
		</move>

		<copy todir="${build.dir}/babelzilla/chrome" overwrite="true">
			<fileset dir="${src.dir}" 
				includes="locale/**" 
				excludes="**/.cvsignore,locale/**/*.properties"/>
		</copy>

		<native2ascii src="${src.dir}" dest="${build.dir}/babelzilla/chrome" encoding="UTF-8">
			<include name="locale/**/*.properties"/>
		</native2ascii>

		<native2ascii src="${build.dir}/all_locales_blank" dest="${build.dir}/babelzilla/chrome" encoding="UTF-8">
			<include name="locale/**/*.properties"/>
			<exclude name="locale/en-US/**"/>
		</native2ascii>

		<replace dir="${build.dir}/babelzilla/chrome/locale">
			<include name="**/snaplinks.properties"/>
			<replacefilter token="snaplinks@snaplinks.net" value="snaplinks@snaplinks.mozdev.org"/>
		</replace>
	</target>
	
	
	<target name="xpi" depends="jar,set-xpi-name,unpack-babelzilla-replaced-bundle">
		<delete file="${dist.dir}/${extension.xpi}"/>

		<zip destfile="${dist.dir}/${extension.xpi}">
			<zipfileset dir="${build.dir}/xpi" includes="*/**" />
		</zip>
	</target>

	
	<target name="xpi-amo" depends="jar,set-xpi-name">
		<mkdir dir="${build.dir}/amo" />

		<copy file="${build.dir}/xpi/install.rdf" todir="${build.dir}/amo" overwrite="true"/>
		
		<replace file="${build.dir}/amo/install.rdf">
			<replacefilter token="&lt;em:updateURL&gt;" value="&lt;!-- &lt;em:updateURL&gt;"/>
			<replacefilter token="&lt;/em:updateURL&gt;" value="&lt;/em:updateURL&gt; --&gt;"/>
		</replace>
		
		<mkdir dir="${dist.dir}/amo" />
		
		<delete file="${dist.dir}/amo/${extension.xpi}" />

		<zip destfile="${dist.dir}/amo/${extension.xpi}">
			<zipfileset dir="${build.dir}/xpi" includes="*/**" excludes="install.rdf"/>
			<zipfileset dir="${build.dir}/amo" includes="install.rdf" />
		</zip>
	</target>

	
	<target name="xpi-babelzilla" depends="copy-src-to-build,set-xpi-name,unpack-babelzilla-blank-bundle">
		<mkdir dir="${dist.dir}/babelzilla" />
		
		<delete file="${dist.dir}/babelzilla/${extension.xpi}" />

		<zip destfile="${dist.dir}/babelzilla/${extension.xpi}" filesonly="true">
			<zipfileset dir="${build.dir}/src" includes="META-INF/zigbert.rsa"/>
			<zipfileset dir="${build.dir}/src" includes="*/**" excludes="META-INF/zigbert.rsa,chrome/locale/**"/>
			<zipfileset dir="${build.dir}/babelzilla" includes="*/**"/>
		</zip>
	</target>


	<target name="xpi-dev" depends="copy-src-to-build,set-xpi-name">
		<delete file="${dist.dir}/${extension.xpi}"/>
		
		<zip destfile="${dist.dir}/${extension.xpi}" filesonly="true">
			<zipfileset dir="${build.dir}/src" includes="META-INF/zigbert.rsa"/>
			<zipfileset dir="${build.dir}/src" includes="*/**" excludes="META-INF/zigbert.rsa"/>
		</zip>
	</target>
	
</project>