<?xml version="1.0"?>

<!--
    build.xml
    Copyright (C) 2008, 2009, 2010, 2011  Tommi Rautava
    
    This file is part of Snap Links Plus.

    Snap Links Plus is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Snap Links Plus is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Snap Links Plus.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="snaplinksplus" default="build-dev">

	<property file="${basedir}/release.properties" />
	
	<property name="babelzilla.dir" value="${basedir}/babelzilla" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="cert.dir" value="${basedir}/cert" />
	<property name="dist.dir" value="${basedir}/dist" />
	<property name="src.dir" value="${basedir}/src" />
	<property name="www.dir" value="${basedir}/www" />
	
	<property name="extension.appsPostfix" value="-fx+sm" />
	<property name="extension.checksumAlgorithm" value="sha1" />

	<property name="localesBundle.filenamePrefix" value="Snap_Links_Plus" />
	<property name="localesBundle.nameForNormalBuild" value="selected_locales_replaced" />
	<property name="localesBundle.nameForBabelzillaBuild" value="all_locales_skipped" />

	<property name="releaseIni.file" value="${www.dir}/release.ini" />
	<property name="buildNumber.file" value="${basedir}/.buildNumbers/build.number.${extension.version}.txt" />
	
	<!-- Compression level: 0=min/fast, 9=max/slow. -->
	<property name="zip.compressionLevel" value="9" />

	<fileset id="src.root.files" dir="${src.dir}">
		<include name="content/**" />
		<include name="defaults/**" />
		<include name="skin/**" />
		<include name="*.*" />
		<exclude name="**/.cvsignore" />
		<exclude name="CVS" />
	</fileset>


	<target name="init-amo" depends="init">
		<mkdir dir="${build.dir}/amo" />
	</target>


	<target name="init-babelzilla" depends="init">
		<mkdir dir="${build.dir}/babelzilla" />
	</target>


	<target name="init-dev" depends="init,set-version-dev">
	</target>


	<target name="init-dist" depends="init,set-version-dist">
	</target>


	<target name="init" depends="init-build,patch-min-and-max-versions">
		<echo level="info" message="Version ${extension.version}-${extension.subVersion} Build ${build.number} started ${build.tstamp}" />

		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/src" />
		<mkdir dir="${dist.dir}" />
	</target>


	<target name="init-build">
		<tstamp>
			<format property="build.tstamp" timezone="GMT+0" pattern="yyyy-MM-dd HH:mm z" />
		</tstamp>

		<!-- Make the build number file writable. -->
		<exec executable="attrib" dir="${basedir}" osfamily="windows">
			<arg value="-r" />
			<arg file="${buildNumber.file}" />
		</exec>

		<buildnumber file="${buildNumber.file}" />
	</target>


	<target name="set-version">
		<property name="extension.versionNumber" value="${extension.version}${extension.subVersion}" />
	</target>


	<target name="set-version-dev" depends="set-version">
		<property name="extension.versionNumber.plusBuild" value="${extension.versionNumber}.0pre${build.number}" />
		<property name="extension.versionNumber.forThisBuild" value="${extension.versionNumber.plusBuild}" />
	</target>


	<target name="set-version-dist" depends="set-version">
		<property name="extension.versionNumber.forThisBuild" value="${extension.versionNumber}" />
	</target>


	<target name="set-xpi-name">
		<property name="extension.xpi" value="${ant.project.name}-${extension.versionNumber.forThisBuild}${extension.appsPostfix}.xpi" />
	</target>


	<target name="clean">
		<delete includeemptydirs="true">
			<fileset dir="${build.dir}" includes="**/*" excludes=".cvsignore" />
		</delete>
	</target>


	<target name="clean-dist">
		<delete includeemptydirs="true">
			<fileset dir="${dist.dir}" includes="**/*" excludes=".cvsignore" />
		</delete>
	</target>


	<target name="build-babelzilla-dev" depends="clean,init-dev,copy-src-to-build,xpi-babelzilla">
		<tstamp prefix="stop">
			<format property="build.tstamp" timezone="GMT+0" pattern="yyyy-MM-dd HH:mm z" />
		</tstamp>
		<echo message="${extension.versionNumber.forThisBuild} ready ${stop.build.tstamp}" />
	</target>


	<target name="build-dev" depends="clean,init-dev,copy-src-to-build,xpi-dev,xpi-babelzilla">
		<tstamp prefix="stop">
			<format property="build.tstamp" timezone="GMT+0" pattern="yyyy-MM-dd HH:mm z" />
		</tstamp>
		<echo message="${extension.versionNumber.forThisBuild} ready ${stop.build.tstamp}" />
	</target>


	<target name="copy-src-to-build" depends="init,unpack-locale-bundle-to-src">
		<copy todir="${build.dir}/src" overwrite="true">
			<fileset refid="src.root.files" />
		</copy>

		<antcall target="patch-install-rdf" />

		<dirset id="locale.dirs" dir="${build.dir}/${localesBundle.nameForNormalBuild}/locale" includes="*" excludes="en-US" />

		<antcall target="patch-chrome-manifest" inheritrefs="yes">
			<param name="dirset.id" value="locale.dirs"/>
		</antcall>

		<antcall target="generate-translator-block" inheritrefs="yes">
			<param name="dirset.id" value="locale.dirs"/>
		</antcall>
	</target>

	<target name="patch-install-rdf">
		<!-- Patch version number into install.rdf. -->
		<replace file="${build.dir}/src/install.rdf" propertyFile="${basedir}/release.properties" encoding="utf-8">
			<replacefilter token="&lt;em:version&gt;0&lt;/em:version&gt;" value="&lt;em:version&gt;${extension.versionNumber.forThisBuild}&lt;/em:version&gt;" />
		</replace>
	</target>

	<target name="patch-min-and-max-versions">
		<antcall target="patch-min-and-max-version-for-single-app" inheritAll="no">
			<param name="id" value="\{ec8030f7-c20a-464f-9b0e-13a3a9e97384\}" />
			<param name="minVersion" value="${firefox.minVersion}" />
			<param name="maxVersion" value="${firefox.maxVersion}" />
		</antcall>

		<antcall target="patch-min-and-max-version-for-single-app" inheritAll="no">
			<param name="id" value="\{92650c4d-4b8e-4d2a-b7eb-24ecf4f6b63a\}" />
			<param name="minVersion" value="${seamonkey.minVersion}" />
			<param name="maxVersion" value="${seamonkey.maxVersion}" />
		</antcall>
	</target>

	<target name="patch-min-and-max-version-for-single-app">
		<fileset id="rdf.files" dir="${basedir}">
			<include name="update.rdf"/>
			<include name="src/install.rdf"/>
		</fileset>

		<replaceregexp encoding="utf-8" flags="m">
			<regexp pattern="(&lt;em:id&gt;${id}&lt;/em:id&gt;\s*\n\s*&lt;em:minVersion&gt;).*(&lt;/em:minVersion&gt;\s*\n\s*&lt;em:maxVersion&gt;).*(&lt;/em:maxVersion&gt;)" />
			<substitution expression="\1${minVersion}\2${maxVersion}\3" />
			<fileset refid="rdf.files" />
		</replaceregexp>
	</target>

	<target name="patch-chrome-manifest">
		<!-- Add locale definitions to chrome.manifest: -->
		<!-- locale snaplinksplus en-US	locale/en-US/ -->
		<pathconvert pathsep="${line.separator}" property="locale.list" refid="${dirset.id}">
			<chainedmapper>
				<flattenmapper/>
				<regexpmapper from="(.*)" to="locale snaplinksplus \1	locale/\1/" />
			</chainedmapper>
		</pathconvert>
		<echo file="${build.dir}/src/chrome.manifest" append="yes">${locale.list}</echo>
	</target>
		
	<target name="generate-translator-block">
		<!-- Generate contents of the template file. -->
		<pathconvert pathsep="${line.separator}" property="translators.list" refid="${dirset.id}">
			<chainedmapper>
				<flattenmapper/>
				<regexpmapper from="(.*)" to="$${translator.\1}" />
			</chainedmapper>
		</pathconvert>
		
		<!-- Write the template file. -->
		<echo file="${build.dir}/translators-template.txt" append="no">${translators.list}</echo>

		<!-- Encode names of the translators. -->
		<native2ascii src="${babelzilla.dir}" dest="${build.dir}" encoding="utf-8" >
			<include name="translators.properties" />
		</native2ascii>
		
		<!-- Convert escape notation into XML format. -->
		<replaceregexp file="${build.dir}/translators.properties" byline="yes" flags="g">
			<regexp pattern="\\u(....)"/>
			<substitution expression="&amp;#x\1;"/>
		</replaceregexp>
		
		<!-- Load names of the translators. -->
		<loadproperties srcfile="${build.dir}/translators.properties" >
			<filterchain>
			</filterchain>
		</loadproperties>
		
		<!-- Load the template and expand the properties. -->
		<loadfile property="translators.block" srcFile="${build.dir}/translators-template.txt" encoding="utf-8">
			<filterchain>
				<expandproperties/>
			</filterchain>
		</loadfile>

		<!-- Write the ready block into a file. This is used for trace purposes only. -->
		<echo file="${build.dir}/translators-block.xml.ent" append="no">${translators.block}</echo>

		<!-- Patch the translator block into install.rdf. -->
		<replace file="${build.dir}/src/install.rdf" encoding="utf-8">
			<replacefilter token="&lt;/em:translator&gt;" value=":&lt;/em:translator&gt;&#13;&#10;${translators.block}" />
		</replace>
	</target>


	<target name="dist" depends="clean,init-dist,xpi-babelzilla,xpi,xpi-amo">
		<checksum file="${dist.dir}/${extension.xpi}" algorithm="${extension.checksumAlgorithm}" property="extension.dist.xpi.checksum" />

		<tstamp prefix="stop">
			<format property="build.tstamp" timezone="GMT+0" pattern="yyyy-MM-dd HH:mm z" />
		</tstamp>

		<echo message="${extension.versionNumber.forThisBuild} is ready ${stop.build.tstamp}" />
		<echo message="${extension.checksumAlgorithm} checsum is ${extension.dist.xpi.checksum}" />
	</target>


	<target name="repack-dist-for-amo" depends="init-amo,init-dist,set-xpi-name">
		<property name="repack.dir" value="${build.dir}/amo.${DSTAMP}.${TSTAMP}" />

		<mkdir dir="${repack.dir}" />

		<unzip src="${dist.dir}/${extension.dist.xpi}" dest="${repack.dir}" />

		<!-- Comment out updateURL as AMO does not allow it. -->
		<replace file="${repack.dir}/install.rdf" encoding="utf-8">
			<replacefilter token="&lt;em:updateURL&gt;" value="&lt;!-- &lt;em:updateURL&gt;" />
			<replacefilter token="&lt;/em:updateURL&gt;" value="&lt;/em:updateURL&gt; --&gt;" />
		</replace>

		<mkdir dir="${dist.dir}/amo" />

		<delete file="${dist.dir}/amo/${extension.dist.xpi}" />

		<zip destfile="${dist.dir}/amo/${extension.dist.xpi}" level="${zip.compressionLevel}">
			<zipfileset dir="${repack.dir}" includes="*/**" />
		</zip>

		<delete dir="${repack.dir}" />
	</target>


	<target name="unpack-locale-bundle-to-src" depends="init">
		<mkdir dir="${build.dir}/${localesBundle.nameForNormalBuild}" />

		<property name="babelzilla-replaced-bundle-tar-gz" value="${localesBundle.filenamePrefix}_${localesBundle.nameForNormalBuild}.tar.gz" />

		<!-- Unpack the string bundle. -->
		<untar src="${basedir}/babelzilla/${babelzilla-replaced-bundle-tar-gz}" dest="${build.dir}/${localesBundle.nameForNormalBuild}/locale" compression="gzip" overwrite="true" />

		<!-- Move all files except .properties to .xpi build directory. -->
		<!-- Also, exclude the default locale (en-US) -->
		<move todir="${build.dir}/src" overwrite="true">
			<fileset dir="${build.dir}/${localesBundle.nameForNormalBuild}" includes="*/**" excludes="**/*.dtd,**/*.properties,locale/en-US/**,**/contents.rdf" />
		</move>

		<!-- Copy the files of the default locale to the .xpi build directory, but exclude .properties. -->
		<copy todir="${build.dir}/src" overwrite="true">
			<fileset dir="${src.dir}" includes="locale/**" excludes="CVS,**/.cvsignore,locale/**/*.properties,locale/**/*.dtd" />
		</copy>

		<!-- Convert DTD files to UTF-8. -->
		<apply executable="${basedir}/utility/convertTextEncoding.exe" dest="${build.dir}/src" parallel="false">
			<arg value="utf-8" />
			<srcfile />
			<targetfile />
			<fileset dir="${src.dir}" includes="locale/en-US/*.dtd" />
			<fileset dir="${build.dir}/${localesBundle.nameForNormalBuild}" includes="**/*.dtd" excludes="locale/en-US/**" />
			<mapper type="identity" />
		</apply>

		<!-- Encode .properties files of the default locale
		<!   and store the results to the .xpi build directory. -->
		<native2ascii src="${src.dir}" dest="${build.dir}/src" encoding="UTF-8">
			<include name="locale/**/*.properties" />
			<exclude name="**/amo.properties" />
		</native2ascii>

		<!-- Encode .properties from the bundle -->
		<native2ascii src="${build.dir}/${localesBundle.nameForNormalBuild}" dest="${build.dir}/src" encoding="UTF-8">
			<include name="locale/**/*.properties" />
			<exclude name="locale/en-US/**" />
			<exclude name="**/amo.properties" />
		</native2ascii>
	</target>


	<target name="unpack-locale-bundle-to-babelzilla-src" depends="init-babelzilla">
		<mkdir dir="${build.dir}/${localesBundle.nameForBabelzillaBuild}" />

		<property name="babelzilla-skipped-bundle-tar-gz" value="${localesBundle.filenamePrefix}_${localesBundle.nameForBabelzillaBuild}.tar.gz" />

		<!-- Unpack the string bundle. -->
		<untar src="${basedir}/babelzilla/${babelzilla-skipped-bundle-tar-gz}" dest="${build.dir}/${localesBundle.nameForBabelzillaBuild}/locale" compression="gzip" overwrite="true" />

		<!-- Move all files except .properties to .xpi build directory. -->
		<!-- Also, exclude the default locale (en-US) -->
		<move todir="${build.dir}/babelzilla" overwrite="true">
			<fileset dir="${build.dir}/${localesBundle.nameForBabelzillaBuild}" includes="*/**" excludes="**/*.dtd,**/*.properties,**/en-US/**,**/contents.rdf" />
		</move>

		<!-- Copy the files of the default locale to the .xpi build directory, but exclude .properties. -->
		<copy todir="${build.dir}/babelzilla" overwrite="true">
			<fileset dir="${src.dir}" includes="locale/**" excludes="CVS,**/.cvsignore,locale/**/*.properties,locale/**/*.dtd" />
		</copy>

		<!-- Convert DTD files to UTF-8. -->
		<apply executable="${basedir}/utility/convertTextEncoding.exe" dest="${build.dir}/babelzilla" parallel="false">
			<arg value="utf-8" />
			<srcfile />
			<targetfile />
			<fileset dir="${src.dir}" includes="locale/en-US/*.dtd" />
			<fileset dir="${build.dir}/${localesBundle.nameForBabelzillaBuild}" includes="**/*.dtd" excludes="**/en-US/**" />
			<mapper type="identity" />
		</apply>

		<!-- Encode .properties files of the default locale
		<!   and store the results to the .xpi build directory. -->
		<native2ascii src="${src.dir}" dest="${build.dir}/babelzilla" encoding="UTF-8">
			<include name="locale/**/*.properties" />
		</native2ascii>

		<!-- Encode .properties from the bundle -->
		<native2ascii src="${build.dir}/${localesBundle.nameForBabelzillaBuild}" dest="${build.dir}/babelzilla" encoding="UTF-8">
			<include name="locale/**/*.properties" />
			<exclude name="locale/en-US/**" />
		</native2ascii>
	</target>


	<target name="xpi" depends="set-xpi-name,copy-src-to-build">
		<delete file="${dist.dir}/${extension.xpi}" />

		<zip destfile="${dist.dir}/${extension.xpi}" level="${zip.compressionLevel}">
			<zipfileset dir="${build.dir}/src" includes="*/**" />
		</zip>
	</target>


	<target name="xpi-dev" depends="set-xpi-name,copy-src-to-build">
		<delete file="${dist.dir}/${extension.xpi}" />

		<zip destfile="${dist.dir}/${extension.xpi}" level="${zip.compressionLevel}" filesonly="true">
			<zipfileset dir="${build.dir}/src" includes="*/**" />
		</zip>
	</target>


	<!-- Make a special .xpi for Addons.Mozilla.org. -->
	<target name="xpi-amo" depends="init-amo,set-xpi-name,copy-src-to-build">
		<mkdir dir="${build.dir}/amo" />

		<copy file="${build.dir}/src/install.rdf" todir="${build.dir}/amo" overwrite="true" />

		<!-- Comment out updateURL as AMO does not allow it. -->
		<replace file="${build.dir}/amo/install.rdf" encoding="utf-8">
			<replacefilter token="&lt;em:updateURL&gt;" value="&lt;!-- &lt;em:updateURL&gt;" />
			<replacefilter token="&lt;/em:updateURL&gt;" value="&lt;/em:updateURL&gt; --&gt;" />
		</replace>

		<mkdir dir="${dist.dir}/amo" />

		<delete file="${dist.dir}/amo/${extension.xpi}" />

		<zip destfile="${dist.dir}/amo/${extension.xpi}" level="${zip.compressionLevel}">
			<zipfileset dir="${build.dir}/src" includes="*/**" excludes="install.rdf" />
			<zipfileset dir="${build.dir}/amo" includes="install.rdf" />
		</zip>
	</target>


	<!-- Make a special .xpi for BabelZilla.org. -->
	<target name="xpi-babelzilla" depends="init-babelzilla,set-xpi-name,copy-src-to-build,unpack-locale-bundle-to-babelzilla-src">
		<mkdir dir="${dist.dir}/babelzilla" />

		<delete file="${dist.dir}/babelzilla/${extension.xpi}" />

		<zip destfile="${dist.dir}/babelzilla/${extension.xpi}" level="${zip.compressionLevel}" filesonly="true">
			<zipfileset dir="${build.dir}/src" includes="*/**" excludes="locale/**" />
			<zipfileset dir="${build.dir}/babelzilla" includes="*/**" />
		</zip>
	</target>

</project>